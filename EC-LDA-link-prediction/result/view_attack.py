import matplotlib.pyplot as plt


def acc_with_global_round(a):

    epochs = list(range(1, len(a) + 1))

    # 绘制准确率随训练轮次变化的图
    plt.figure(figsize=(10, 6))
    plt.plot(epochs, a, marker='o', linestyle='-', color='b', label='Accuracy')

    # 添加标题和标签
    plt.title('Accuracy vs. Training Epochs')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')

    # 添加网格和图例
    plt.grid(True)
    plt.legend()

    # 显示图像
    plt.show()
    plt.savefig("save/acc_with_global_round.png")

def mean_params_and_metric_and_random(a,b,random):
    # 创建画布和第一个子图
    fig, ax1 = plt.subplots()

    # 绘制第一个数据集
    ax1.plot(a, 'g-', label='Y1 mean_params')
    ax1.set_xlabel('X')
    ax1.set_ylabel('Y1 mean_params', color='g')
    ax1.tick_params(axis='y', labelcolor='g')

    # 创建第二个子图并绑定到同一X轴
    ax2 = ax1.twinx()
    ax2.plot(b, 'b-', label='Y2 all_l2_norm')
    ax2.set_ylabel('Y2 all_l2_norm', color='b')
    ax2.tick_params(axis='y', labelcolor='b')

    # 添加第三条线到右边的y轴
    ax2.plot(random, 'r-', label='Random')
    ax2.tick_params(axis='y', labelcolor='r')

    # 添加图例
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc='upper right')

    # 保存图像
    # plt.savefig("save/image.png")

    # 显示图形
    plt.show()

def attack_performance(a,b,c=None):
    plt.xlabel('global round')
    plt.ylabel('metric')
    plt.plot(b,label = 'no active attack')
    d = [0.018918092979216854, 0.022487160781558185, 0.022504256038821044, 0.022504435461128014, 0.022504388532841715, 0.022504326966818724, 0.022504445260942856, 0.022504381880986607, 0.0225043842225359, 0.022504385115465552, 0.022504326826123584, 0.02250438604658944, 0.02250433459416365, 0.022504384880577995, 0.022504439625329525, 0.02250432812499453, 0.02250438492352441, 0.022504445034787407, 0.02250438396381519, 0.022504328686338174, 0.022504436746844703, 0.022504387041771715, 0.02250432500959659, 0.022504383334741737, 0.022504385403600145, 0.022504382449346168, 0.022504385804113007, 0.022504327908697743, 0.022504391569570688, 0.022504336205145296, 0.02250438632713228, 0.02250433801932959, 0.022504442801625873, 0.022504327931972493, 0.022504385843520137, 0.022504382673862018, 0.02250433082804544, 0.022504383685172474, 0.02250438406190704, 0.02250432772087003, 0.022504383599411315, 0.02250438389987329, 0.02250433167550267, 0.02250443449699266, 0.022504378069224593, 0.0225042701328986, 0.022504329949044374, 0.022504383842199747, 0.022504329016712284, 0.022504442667869082, 0.022504332584053755, 0.022504318821061832, 0.022504386914464398, 0.022504324447180722, 0.022504333760811786, 0.02250433153086716, 0.022504384315832012, 0.022504385265343395, 0.022504443706566624, 0.022504382806032078, 0.022504389385107345, 0.02250438236409061, 0.022504386472906406, 0.02250438759166915, 0.022504383177713496, 0.022504435862650593, 0.022504386432436536, 0.022504328300991604, 0.02250438791717973, 0.02250438241532502, 0.02250432401276414, 0.022504377507186264, 0.0225043273368061, 0.0225042747318141, 0.022504383760744272, 0.02250433645274132, 0.022504380880609246, 0.02250438377365095, 0.02250438418099608, 0.022504329939738006, 0.02250438827064707, 0.022504334302483532, 0.022504383349287903, 0.022504388638083225, 0.022504387389482978, 0.022504331782064155, 0.022504334913404124, 0.022504278393884466, 0.022504382352453285, 0.02250443880223103, 0.0225043325353459, 0.022504331310598927, 0.022504275041049585, 0.02250438800117198, 0.02250444007227068, 0.02250438804751904, 0.02250432942405591, 0.022504329990400005, 0.02250433522260216, 0.022504329385730916]
    # d=[1,2,3]
    if c != None:
        plt.plot(c,label='random')
    plt.plot(d,label='active attack')
    plt.legend(loc = 'upper right')
    plt.show()

def two_metric(a,b):
    length = len(a)
    x = [i for i in range(length)]
    plt.xlabel('Global Round')
    plt.ylabel('Metric')
    plt.plot(x,a,label = 'Cos-sim')
    plt.plot(x,b,label = 'JS-div')
    plt.legend()
    plt.show()

if __name__ == '__main__':
    two_metric([1,1,1,1],[2,2,2,2])